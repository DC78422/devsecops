include:
  - local: 'functions.gitlab-ci.yml'

# Anchore Grype (https://github.com/anchore/grype)
Grype Image Scanning:
  # stage: .post
  stage: SAST (image)
  extends:
    - ".sast_base"
    - ".sast_rule"
    - ".DefectDojo_variables"
  variables:
    SAST_IMAGE: registry.example.com/openshift/grype:0.74.6-debug
    GIT_STRATEGY: none
    DOCKER_CONFIG: "/tmp/config"
    GRYPE_DB_UPDATE_URL: "https://grype-db.example.com/listing.json"
    GRYPE_DB_CACHE_DIR: "/tmp"
  script:
    - mkdir /tmp/config || true
    - grype db list
    - echo "{\"auths\":{\"registry.example.com\":{\"username\":\"serviceaccount\",\"password\":\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\"},\"harbor.example.com\":{\"username\":\"$HARBOR_LOGIN\",\"password\":\"$HARBOR_PASSWORD\"}}}" > /tmp/config/config.json
    - grype $IMAGE_TO_SCAN --only-fixed -o json > reports/iac.grype.report.json
  after_script:
    - echo "Uploading"
    - dd-wrapper --dd-report-file=reports/iac.grype.report.json --dd-engagement-test-title="Anchore Image Grype" --dd-engagement-scan-type="Anchore Grype"
  when: manual

# Trivy (https://github.com/aquasecurity/trivy)
Trivy Image Scanning:
  # stage: .post
  stage: SAST (image)
  extends:
    - ".sast_base"
    - ".sast_rule"
    - ".DefectDojo_variables"
  variables:
    # SAST_IMAGE: harbor.example.com/devops/trivy:latest
    SAST_IMAGE: registry.example.com/openshift/trivy:0.49.1
  script:
    - trivy image
      --ignore-unfixed
      --image-config-scanners misconfig,secret
      -o reports/iac.trivy.image.report.json
      --username serviceaccount,"$HARBOR_LOGIN"
      --password "$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)","$HARBOR_PASSWORD"
      $IMAGE_TO_SCAN
  after_script:
    - echo "Uploading"
    - dd-wrapper --dd-report-file=reports/iac.trivy.image.report.json --dd-engagement-test-title="Trivy Image Scan" --dd-engagement-scan-type="Trivy Scan"
  when: manual

Dockle Image Scanning:
  # stage: .post
  stage: SAST (image)
  extends:
    - ".sast_base"
    - ".sast_rule"
    - ".DefectDojo_variables"
  variables:
    SAST_IMAGE: harbor.example.com/devops/dockle:latest
  script:
    - dockle
      --username $HARBOR_LOGIN
      --password $HARBOR_PASSWORD
      --insecure
      -f json
      -o reports/iac.dockle.report.json
      $IMAGE_TO_SCAN
  after_script:
    - |
      if [ "$DD_UPLOAD_REPORT" = 'true' ]; then
        echo "Uploading"
        dd-wrapper --dd-report-file=reports/iac.dockle.report.json --dd-engagement-test-title="Dockle Image Scanning" --dd-engagement-scan-type="Dockle Scan"
      fi
  when: manual

# # Trufflehog (https://github.com/trufflesecurity/trufflehog)
# Trufflehog Image Scanning:
#   # stage: .post
#   stage: SAST (image)
#   extends:
#     - ".sast_base"
#     - ".iac_docker_rule"
#   variables:
#     IAC_IMAGE: harbor.example.com/devops/trufflehog:latest
#   script:
#     - trufflehog docker --image=$IMAGE_TO_SCAN -j > reports/iac.trufflehog.report.json
#   when: manual

DefectDojo Engagement Creation:
  extends:
    - ".DefectDojo_Engagement_Creation"
